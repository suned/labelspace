AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Template for labelspace api resources

Parameters:
  StackName:
    Type: String
    Description: Unique name for stack
  Database:
    Type: String
    Description: Name of stack database
  DatabaseSecret:
    Type: String
    Description: Database secret


Resources:
  ######################### Cognito #########################
  UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: !Sub ${StackName}-user-pool
        AutoVerifiedAttributes: [email]
        EmailConfiguration:
          SourceArn: arn:aws:ses:eu-west-1:315719867778:identity/welcome@labelspace.ai
        AliasAttributes: [email]
        LambdaConfig:
          PostConfirmation: !GetAtt CognitoPostConfirmationTrigger.Arn
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: organization
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: organizationId
            AttributeDataType: String
            Mutable: true
            Required: false

  UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub ${StackName}-client
        GenerateSecret: false
        UserPoolId: !Ref UserPool

  CognitoPostConfirmationTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${StackName}-S3BucketsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt UploadBucket.Arn
                  - !GetAtt CollectionBucket.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Join ["/", [!GetAtt UploadBucket.Arn, "*"]]
                  - !Join ["/", [!GetAtt CollectionBucket.Arn, "*"]]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminSetUserSettings
                  - cognito-idp:AdminUpdateUserAttributes
                Resource:
                  - arn:aws:cognito-idp:*:*:*

  CognitoPostConfirmationTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/deploy_package/
      Handler: backend.cognito_post_confirmation_handler.handle
      Runtime: python3.6
      Timeout: 15
      Role: !GetAtt CognitoPostConfirmationTriggerRole.Arn
      Environment:
        Variables:
          COLLECTION_BUCKET: !Ref CollectionBucket
          UPLOAD_BUCKET: !Ref UploadBucket
          DATABASE_SECRET: !Ref DatabaseSecret
          DATABASE: !Ref Database

  PostConfirmationTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPostConfirmationTrigger.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  ######################### S3 #########################
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${StackName}-labelspace-upload

  CollectionBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${StackName}-labelspace-collection

  ######################### AppSync #########################
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${StackName}-graphql-api
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        # TODO: how to set this dynamically?
        AwsRegion: eu-west-1
        DefaultAction: ALLOW

  FaunaDBDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - appsync.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${StackName}-FaunaDBDataSourcePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt FaunaDBDataSourceHandler.Arn

  FaunaDBDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: FaunaDBDataSource
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt FaunaDBDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt FaunaDBDataSourceHandler.Arn
      ApiId: !GetAtt GraphQLApi.ApiId

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        schema {
            query: Query
            mutation: Mutation
        }

        type Query {
            getLabels: [Label]
        }

        type Mutation {
            createLabel(labelType: String, label: String): Label
        }

        type Label {
            labelType: String!
            ref: String
            label: String!
        }



  SaveLabelResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt FaunaDBDataSource.Name
      TypeName: Mutation
      FieldName: createLabel
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
                "field": "createLabel",
                "arguments": $utils.toJson($context.arguments),
                "identity": $utils.toJson($context.identity)
            }
        }
      ResponseMappingTemplate: $context.result

  GetLabelsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt FaunaDBDataSource.Name
      TypeName: Query
      FieldName: getLabels
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
                "field": "getLabels",
                "arguments": $utils.toJson($context.arguments),
                "identity": $utils.toJson($context.identity)
            }
        }
      ResponseMappingTemplate: $context.result

  FaunaDBDataSourceHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/deploy_package/
      Handler: backend.data_source_handler.handle
      Runtime: python3.6
      Role: !GetAtt CognitoPostConfirmationTriggerRole.Arn
      Environment:
        Variables:
          DATABASE_SECRET: !Ref DatabaseSecret
          DATABASE: !Ref Database
          USERPOOL_ID: !Ref UserPool

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub ${StackName}-UserPool::Id
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${StackName}-UserPoolClient::Id
  ApiUrl:
    Value: !GetAtt GraphQLApi.GraphQLUrl
    Export:
      Name: !Sub ${StackName}-ApiUrl