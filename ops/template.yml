AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Template for labelspace api resources

Parameters:
  StackName:
    Type: String
    Description: Unique name for stack
  Database:
    Type: String
    Description: Name of stack database
  DatabaseSecret:
    Type: String
    Description: Database secret


Resources:
  ######################### Cognito #########################
  UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: !Sub ${StackName}-user-pool
        AutoVerifiedAttributes: [email]
        EmailConfiguration:
          SourceArn: arn:aws:ses:eu-west-1:315719867778:identity/welcome@labelspace.ai
        AliasAttributes: [email]
        LambdaConfig:
          PostConfirmation: !GetAtt CognitoPostConfirmationTrigger.Arn
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: organization
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: organizationId
            AttributeDataType: String
            Mutable: true
            Required: false

  UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub ${StackName}-client
        GenerateSecret: false
        UserPoolId: !Ref UserPool

  CognitoPostConfirmationTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${StackName}-S3BucketsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt UploadBucket.Arn
                  - !GetAtt CollectionBucket.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Join ["/", [!GetAtt UploadBucket.Arn, "*"]]
                  - !Join ["/", [!GetAtt CollectionBucket.Arn, "*"]]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminSetUserSettings
                  - cognito-idp:AdminUpdateUserAttributes
                Resource:
                  - arn:aws:cognito-idp:*:*:*


  CognitoPostConfirmationTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/deploy_package/
      Handler: api.cognito_post_confirmation_handler.handle
      Runtime: python3.6
      Timeout: 15
      Role: !GetAtt CognitoPostConfirmationTriggerRole.Arn
      Environment:
        Variables:
          COLLECTION_BUCKET: !Ref CollectionBucket
          UPLOAD_BUCKET: !Ref UploadBucket
          DATABASE_SECRET: !Ref DatabaseSecret
          DATABASE: !Ref Database

  PostConfirmationTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPostConfirmationTrigger.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  ######################### S3 #########################
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${StackName}-labelspace-upload

  CollectionBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${StackName}-labelspace-collection

  ######################### Api #########################
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Cors:
        # TODO More sophisticated way of allowing
        # TODO localhost in dev
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,content-type,Authorization,authorization'"
      StageName: dev
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        securityDefinitions:
          CognitoAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              providerARNs:
                - !GetAtt UserPool.Arn
              type: cognito_user_pools
        paths:
          /labels/{labelType}:
            post:
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateLabelsHandler.Arn}/invocations

  CreateLabelsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/deploy_package/
      Handler: api.create_labels_handler.handle
      Runtime: python3.6
      Role: !GetAtt CognitoPostConfirmationTriggerRole.Arn
      Environment:
        Variables:
          DATABASE_SECRET: !Ref DatabaseSecret
          DATABASE: !Ref Database
          USERPOOL_ID: !Ref UserPool
      Events:
        Api:
          Type: Api
          Properties:
            Path: /labels/{labelType}
            Method: post
            RestApiId: !Ref Api

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub ${StackName}-UserPool::Id
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${StackName}-UserPoolClient::Id
  ApiUrl:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev/"
    Export:
      Name: !Sub ${StackName}-ApiUrl